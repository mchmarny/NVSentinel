# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "incluster-file-server.fullname" . }}
  labels:
    {{- include "incluster-file-server.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "incluster-file-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "incluster-file-server.selectorLabels" . | nindent 8 }}
    spec:
{{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | nindent 8 }}
{{- else }}
{{- with .Values.global }}
{{- with .imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | nindent 8 }}
{{- end }}
{{- end }}
{{- end }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
        fsGroupChangePolicy: {{ .Values.podSecurityContext.fsGroupChangePolicy }}
{{- with (.Values.global.systemNodeSelector | default .Values.nodeSelector) }}
      nodeSelector:
{{ toYaml . | nindent 8 }}
{{- end }}
{{- with (.Values.global.affinity | default .Values.affinity) }}
      affinity:
{{ toYaml . | nindent 8 }}
{{- end }}
{{- with (.Values.global.systemNodeTolerations | default .Values.tolerations) }}
      tolerations:
{{ toYaml . | nindent 8 }}
{{- end }}
      initContainers:
        - name: init-perms
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          command: ["sh", "-lc", "mkdir -p /usr/share/nginx/html/upload /var/cache/nginx /var/run /opt/bitnami/nginx/tmp/client_body /opt/bitnami/nginx/tmp/proxy /opt/bitnami/nginx/tmp/fastcgi /opt/bitnami/nginx/tmp/uwsgi /opt/bitnami/nginx/tmp/scgi && chmod -R g+rwX /usr/share/nginx/html /var/cache/nginx /opt/bitnami/nginx/tmp || true"]
          volumeMounts:
            - name: artifacts
              mountPath: /usr/share/nginx/html
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run
            - name: nginx-tmp
              mountPath: /opt/bitnami/nginx/tmp
      containers:
        - name: nginx
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          ports:
            - name: http
              containerPort: 8080
          securityContext:
            runAsUser: {{ .Values.containerSecurityContext.runAsUser }}
            runAsGroup: {{ .Values.containerSecurityContext.runAsGroup }}
            allowPrivilegeEscalation: {{ .Values.containerSecurityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: {{ .Values.containerSecurityContext.readOnlyRootFilesystem }}
          volumeMounts:
            - name: artifacts
              mountPath: /usr/share/nginx/html
              readOnly: false
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            # Also mount for Bitnami NGINX images, which read server blocks from this path
            - name: nginx-conf
              mountPath: /opt/bitnami/nginx/conf/server_blocks/file-server.conf
              subPath: default.conf
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run
            - name: nginx-tmp
              mountPath: /opt/bitnami/nginx/tmp
            - name: nginx-logs
              mountPath: /var/log/nginx
{{- if .Values.metrics.enabled }}
        # HTTP metrics exporter
        - name: nginx-log-exporter
          image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy }}
          args:
            - -config-file=/etc/prometheus-nginxlog-exporter/config.yml
          ports:
            - name: metrics
              containerPort: {{ .Values.metricsPort }}
          volumeMounts:
            - name: nginx-logs
              mountPath: /var/log/nginx
            - name: nginx-conf
              mountPath: /etc/prometheus-nginxlog-exporter/config.yml
              subPath: log-exporter-config.yml
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 64Mi
{{- end }}
{{- if .Values.logCleanup.enabled }}
{{- if lt (.Values.logCleanup.retentionDays | int) 1 }}
{{- fail "logCleanup.retentionDays must be at least 1 day to prevent accidental data loss" }}
{{- end }}
        - name: log-cleanup
          image: {{ .Values.cleanupMetrics.image.repository }}:{{ .Values.cleanupMetrics.image.tag | default .Values.global.image.tag | default "latest" }}
          imagePullPolicy: {{ .Values.cleanupMetrics.image.pullPolicy }}
          ports:
            - name: cleanup-metrics
              containerPort: {{ .Values.cleanupMetricsPort }}
          env:
            - name: CLEANUP_METRICS_PORT
              value: "{{ .Values.cleanupMetricsPort }}"
            - name: LOG_RETENTION_DAYS
              value: "{{ .Values.logCleanup.retentionDays }}"
            - name: LOG_CLEANUP_SLEEP_INTERVAL
              value: "{{ .Values.logCleanup.sleepInterval }}"
            - name: TARGET_DIRECTORY
              value: "/usr/share/nginx/html"
          volumeMounts:
            - name: artifacts
              mountPath: /usr/share/nginx/html
            - name: nginx-logs
              mountPath: /var/log/nginx
          resources:
            requests:
              cpu: 10m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
{{- end }}
      volumes:
        - name: artifacts
{{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "incluster-file-server.fullname" . }}-data
{{- else }}
          emptyDir: {}
{{- end }}
        - name: nginx-conf
          configMap:
            name: {{ include "incluster-file-server.fullname" . }}-nginx-conf
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
        - name: nginx-tmp
          emptyDir: {}
        - name: nginx-logs
          emptyDir: {}
---
{{- if .Values.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "incluster-file-server.fullname" . }}-data
  labels:
    {{- include "incluster-file-server.labels" . | nindent 4 }}
spec:
  accessModes:
{{- range .Values.persistence.accessModes }}
    - {{ . | quote }}
{{- end }}
  resources:
    requests:
      storage: {{ .Values.persistence.size }}
{{- if .Values.persistence.storageClassName }}
  storageClassName: {{ .Values.persistence.storageClassName | quote }}
{{- end }}
{{- end }}

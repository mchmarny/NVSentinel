# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Generate SBOM and Attest'
description: 'Generates SBOM and build provenance attestation for container images'

inputs:
  image_name:
    description: 'Full image name (without tag or digest)'
    required: true
  image_digest:
    description: 'Image digest (sha256:...)'
    required: true
  registry_password:
    description: 'Registry password for authentication'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Authenticate to GHCR
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.registry_password }}

    - name: Derive safe filename
      id: name
      shell: bash
      run: |
        IMAGE="${{ inputs.image_name }}"
        SAFE="$(basename "${IMAGE%%:*}")"  # strip tag if present, then basename
        echo "safe=$SAFE" >> "$GITHUB_OUTPUT"

    - name: Generate SBOM
      id: sbom
      uses: anchore/sbom-action@8e94d75ddd33f69f691467e42275782e4bfefe84  # v0.20.9
      continue-on-error: false  # Explicitly fail if SBOM generation fails
      with:
        image: "${{ inputs.image_name }}@${{ inputs.image_digest }}"
        format: cyclonedx-json
        output-file: sbom-${{ steps.name.outputs.safe }}.cdx.json
        upload-artifact: true          # also uploads to the workflow run
        upload-release-assets: auto    # 'auto' == assets on tags
    
    - name: Find generated SBOM file
      id: find-sbom
      shell: bash
      if: steps.sbom.outcome == 'success'
      run: |
        set -x
        echo "::group::Find SBOM file"
        
        echo "SBOM action outputs:"
        echo "  fileName: ${{ steps.sbom.outputs.fileName }}"
        
        # Try multiple locations
        EXPECTED_FILE="sbom-${{ steps.name.outputs.safe }}.cdx.json"
        echo "Expected file: $EXPECTED_FILE"
        
        # Search for the actual SBOM file
        SBOM_FILE=""
        if [ -f "$EXPECTED_FILE" ]; then
          SBOM_FILE="$EXPECTED_FILE"
        elif [ -f "${{ steps.sbom.outputs.fileName }}" ]; then
          SBOM_FILE="${{ steps.sbom.outputs.fileName }}"
        else
          # Search filesystem for .cyclonedx.json files
          echo "Searching for .cyclonedx.json files..."
          FOUND=$(find /tmp -name "*.cyclonedx.json" -type f 2>/dev/null | head -1)
          if [ -n "$FOUND" ]; then
            SBOM_FILE="$FOUND"
            echo "Found SBOM at: $SBOM_FILE"
            # Copy to expected location
            cp "$SBOM_FILE" "$EXPECTED_FILE"
            SBOM_FILE="$EXPECTED_FILE"
          fi
        fi
        
        if [ -z "$SBOM_FILE" ] || [ ! -f "$SBOM_FILE" ]; then
          echo "::error::SBOM file not found"
          echo "Current directory: $(pwd)"
          ls -la
          exit 1
        fi
        
        echo "✅ Using SBOM file: $SBOM_FILE"
        ls -lh "$SBOM_FILE"
        echo "sbom_file=$SBOM_FILE" >> "$GITHUB_OUTPUT"
        echo "::endgroup::"

    - name: Install Cosign
      uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad  # v4.0.0

    - name: Re-authenticate for Cosign
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.registry_password }}

    - name: Cosign SBOM attestation
      shell: bash
      if: steps.find-sbom.outcome == 'success'
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        set -euxo pipefail
        
        echo "::group::Cosign SBOM Attestation"
        SBOM_FILE="${{ steps.find-sbom.outputs.sbom_file }}"
        IMAGE_REF="${{ inputs.image_name }}@${{ inputs.image_digest }}"
        
        echo "Image: $IMAGE_REF"
        echo "SBOM file: $SBOM_FILE"
        echo "COSIGN_EXPERIMENTAL: ${COSIGN_EXPERIMENTAL}"
        
        # Verify SBOM file exists
        if [ ! -f "$SBOM_FILE" ]; then
          echo "::error::SBOM file not found: $SBOM_FILE"
          exit 1
        fi
        
        # Check if this is a multi-platform image (OCI index)
        MANIFEST_TYPE=$(crane manifest "$IMAGE_REF" | jq -r '.mediaType // "unknown"')
        echo "Manifest type: $MANIFEST_TYPE"
        
        if [[ "$MANIFEST_TYPE" == "application/vnd.oci.image.index.v1+json" ]] || \
           [[ "$MANIFEST_TYPE" == "application/vnd.docker.distribution.manifest.list.v2+json" ]]; then
          echo "Multi-platform image detected - attesting each platform digest"
          
          # Extract platform-specific digests
          PLATFORM_DIGESTS=$(crane manifest "$IMAGE_REF" | \
            jq -r '.manifests[] | select(.annotations."vnd.docker.reference.type" != "attestation-manifest") | .digest' | \
            grep -v "^$")
          
          if [ -z "$PLATFORM_DIGESTS" ]; then
            echo "::error::No platform digests found in multi-platform manifest"
            exit 1
          fi
          
          echo "Found platform digests:"
          echo "$PLATFORM_DIGESTS"
          
          # Attest each platform digest
          for DIGEST in $PLATFORM_DIGESTS; do
            echo ""
            echo "Attesting platform digest: $DIGEST"
            cosign attest \
              --yes \
              --predicate "$SBOM_FILE" \
              --type cyclonedx \
              "${{ inputs.image_name }}@${DIGEST}"
          done
        else
          echo "Single-platform image detected - attesting directly"
          cosign attest \
            --yes \
            --predicate "$SBOM_FILE" \
            --type cyclonedx \
            "$IMAGE_REF"
        fi
        
        echo ""
        echo "✅ Cosign attestation completed successfully"
        echo "::endgroup::"

    - name: Attest build provenance
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a  # v3.0.0
      with:
        subject-name: ${{ inputs.image_name }}
        subject-digest: ${{ inputs.image_digest }}
        push-to-registry: true
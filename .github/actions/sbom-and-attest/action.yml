# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Generate SBOM and Attest'
description: 'Generates SBOM and build provenance attestation for container images'

inputs:
  image_name:
    description: 'Full image name (without tag or digest)'
    required: true
  image_digest:
    description: 'Image digest (sha256:...)'
    required: true
  registry_password:
    description: 'Registry password for authentication'
    required: true
  crane_version:
    description: 'Version of crane to install (default: v0.20.2)'
    required: false
    default: 'v0.20.2'

runs:
  using: 'composite'
  steps:
    - name: Authenticate to GHCR
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.registry_password }}

    - name: Derive safe filename
      id: name
      shell: bash
      run: |
        IMAGE="${{ inputs.image_name }}"
        SAFE="$(basename "${IMAGE%%:*}")"  # strip tag if present, then basename
        echo "safe=$SAFE" >> "$GITHUB_OUTPUT"

    - name: Generate SBOM
      uses: anchore/sbom-action@8e94d75ddd33f69f691467e42275782e4bfefe84  # v0.20.9
      with:
        image: "${{ inputs.image_name }}@${{ inputs.image_digest }}"
        format: cyclonedx-json
        output-file: sbom-${{ steps.name.outputs.safe }}.cdx.json
        upload-artifact: true
        upload-release-assets: auto
    
    - name: Verify SBOM file
      id: find-sbom
      shell: bash
      run: |
        SBOM_FILE="sbom-${{ steps.name.outputs.safe }}.cdx.json"
        if [ ! -f "$SBOM_FILE" ]; then
          echo "::error::SBOM file not found: $SBOM_FILE"
          exit 1
        fi
        echo "sbom_file=$SBOM_FILE" >> "$GITHUB_OUTPUT"

    - name: Install Crane
      shell: bash
      run: |
        if ! command -v crane &> /dev/null; then
          echo "Installing crane ${{ inputs.crane_version }}..."
          curl -sL "https://github.com/google/go-containerregistry/releases/download/${{ inputs.crane_version }}/go-containerregistry_Linux_x86_64.tar.gz" | tar -xz crane
          sudo mv crane /usr/local/bin/crane
          sudo chmod +x /usr/local/bin/crane
        fi
        crane version

    - name: Install Cosign
      uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad  # v4.0.0

    - name: Cosign SBOM attestation
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        set -euo pipefail
        
        SBOM_FILE="${{ steps.find-sbom.outputs.sbom_file }}"
        IMAGE_REF="${{ inputs.image_name }}@${{ inputs.image_digest }}"
        
        # Check if this is a multi-platform image (OCI index)
        MANIFEST_TYPE=$(crane manifest "$IMAGE_REF" | jq -r '.mediaType // "unknown"')
        
        if [[ "$MANIFEST_TYPE" == "application/vnd.oci.image.index.v1+json" ]] || \
           [[ "$MANIFEST_TYPE" == "application/vnd.docker.distribution.manifest.list.v2+json" ]]; then
          # Multi-platform: attest each platform digest separately
          PLATFORM_DIGESTS=$(crane manifest "$IMAGE_REF" | \
            jq -r '.manifests[] | select((.annotations."vnd.docker.reference.type" // "") != "attestation-manifest") | .digest')
          
          while IFS= read -r DIGEST; do
            echo "Attesting ${{ inputs.image_name }}@${DIGEST}"
            cosign attest \
              --yes \
              --predicate "$SBOM_FILE" \
              --type cyclonedx \
              "${{ inputs.image_name }}@${DIGEST}"
          done <<< "$PLATFORM_DIGESTS"
        else
          # Single-platform: attest directly
          echo "Attesting $IMAGE_REF"
          cosign attest \
            --yes \
            --predicate "$SBOM_FILE" \
            --type cyclonedx \
            "$IMAGE_REF"
        fi

    - name: Attest build provenance
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a  # v3.0.0
      with:
        subject-name: ${{ inputs.image_name }}
        subject-digest: ${{ inputs.image_digest }}
        push-to-registry: true
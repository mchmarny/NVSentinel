# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Publish Container'
description: 'Complete container publishing workflow with Docker setup, login, and build'

inputs:
  make_command:
    description: 'Make command to run for building and publishing'
    required: true
  registry_password:
    description: 'Registry password'
    required: true
  container_name: 
    description: 'Container image being pushed'
    required: true
  tag_suffix:
    description: 'Optional tag that has to be appended to the image tag'
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
      with:
        driver-opts: network=host

    - name: Cache Docker layers
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830  # v4.3.0
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.registry_password }}

    - name: Build and publish container
      shell: bash
      id: image
      env:
        DOCKER_BUILDKIT: 1
        BUILDX_CACHE_FROM: type=local,src=/tmp/.buildx-cache
        BUILDX_CACHE_TO: type=local,dest=/tmp/.buildx-cache-new,mode=max
      run: |
        ${{ inputs.make_command }}

        # Compute SAFE_REF_NAME the same way the Makefile does
        SAFE_REF_NAME=$(echo "${CI_COMMIT_REF_NAME:-${GITHUB_REF_NAME}}" | sed 's/\//-/g')
        DIGEST="$(crane digest ghcr.io/nvidia/${{ inputs.container_name }}:${SAFE_REF_NAME}${{ inputs.tag_suffix }})"
        echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
        echo "name=ghcr.io/nvidia/${{ inputs.container_name }}" >> "$GITHUB_OUTPUT"

        # Move cache to prevent it from growing indefinitely
        if [ -d "/tmp/.buildx-cache-new" ]; then
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        fi
    
    - name: Attest
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a  # v3.0.0
      id: attest
      with:
        subject-name: ${{ steps.image.outputs.name }}
        subject-digest: ${{ steps.image.outputs.digest }}
        push-to-registry: true

    - name: Derive safe filename
      id: name
      shell: bash
      run: |
        IMAGE="${{ steps.image.outputs.name  }}"
        SAFE="$(basename "${IMAGE%%:*}")"  # strip tag if present, then basename
        echo "safe=$SAFE" >> "$GITHUB_OUTPUT"

    - name: Generate SBOM
      uses: anchore/sbom-action@8e94d75ddd33f69f691467e42275782e4bfefe84  # v0.20.9
      with:
        image: ${{ steps.image.outputs.name  }}@${{ steps.image.outputs.digest }}
        format: cyclonedx-json
        output-file: sbom-${{ steps.name.outputs.safe }}.cdx.json
        upload-artifact: true          # also uploads to the workflow run
        upload-release-assets: auto    # 'auto' == assets on tags

    - name: Install Cosign
      uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad  # v4.0.0

    - name: Cosign SBOM attestation
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "1"
      run: |
        cosign attest \
          --yes \
          --predicate sbom-${{ steps.name.outputs.safe }}.cdx.json \
          --type cyclonedx \
          ${{ steps.image.outputs.name  }}@${{ steps.image.outputs.digest }}